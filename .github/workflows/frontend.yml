name: Frontend Build & Push

on:
  push:
    branches: [main]
    paths:
      - 'code/frontend/src/**'
  pull_request:
    branches: [main, dev]
    paths:
      - 'code/frontend/src/**'

permissions:
  contents: write      

env:
  DOCKERHUB_USER: suzal777

jobs:
  check-frontend-change:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.filter.outputs.frontend == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Frontend Changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'code/frontend/**'

  check-dev-merge:
    runs-on: ubuntu-latest
    needs: check-frontend-change
    if: |
      github.ref == 'refs/heads/main' &&
      needs.check-frontend-change.outputs.changed == 'true'
    outputs:
      is_dev_merge: ${{ steps.check-merge.outputs.is_dev_merge }}
    steps:
      - name: Check if merge from dev
        id: check-merge
        run: |
          if [ "${{ github.event_name }}" = "push" ] && \
             [ "${{ github.ref }}" = "refs/heads/main" ]; then
             echo "is_dev_merge=true" >> $GITHUB_OUTPUT
          else
            echo "is_dev_merge=false" >> $GITHUB_OUTPUT
          fi

  pr-checks:
    name: PR Research Checks
    runs-on: ubuntu-latest
    needs: check-frontend-change
    if: |
      needs.check-frontend-change.outputs.changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: |
            code/frontend/node_modules
            code/frontend/.yarn/cache
          key: ${{ runner.os }}-frontend-${{ hashFiles('code/frontend/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      - name: Install ESLint
        run: npm install -g eslint

      - name: Run ESLint (frontend)
        working-directory: ./code/frontend
        run: |
          yarn install --frozen-lockfile
          yarn lint

  build-and-push-frontend-dev:
    runs-on: [frontend]
    needs: [check-frontend-change, pr-checks, check-dev-merge]
    if: |
      needs.check-frontend-change.outputs.changed == 'true' &&
      (github.event_name != 'pull_request' || needs.pr-checks.result == 'success') &&
      github.ref != 'refs/heads/main' 
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Frontend
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          BRANCH_NAME=$(echo $GITHUB_REF_NAME | tr '/' '-')
          
            docker build \
              --build-arg VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }} \
              -t $DOCKERHUB_USER/frontend:$BRANCH_NAME-$SHORT_SHA \
              ./code/frontend
            docker push $DOCKERHUB_USER/frontend:$BRANCH_NAME-$SHORT_SHA
            
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker logout
        if: always()
        run: docker logout

  build-and-push-frontend-main:
    runs-on: [ubuntu-latest]
    needs: [pr-checks, check-dev-merge]
    if: |
      github.ref == 'refs/heads/main' &&
      needs.check-dev-merge.outputs.is_dev_merge == 'true'
    environment:
      name: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18    

      - name: Install dependencies
        working-directory: ./code/frontend/
        run: yarn install --frozen-lockfile  

      - name: Install @types/node
        working-directory: ./code/frontend/
        run: yarn add -D @types/node  

      - name: Build frontend with yarn
        working-directory: ./code/frontend/
        env:
          VITE_BASE_PATH: /ci-github-actions/
          VITE_CLERK_PUBLISHABLE_KEY: pk_test_bGl2aW5nLWVsZi05NC5jbGVyay5hY2NvdW50cy5kZXYk
        run: yarn build    

      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Get Semantic Version
        id: semver_frontend
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: "main"
          tag_prefix: "frontend-v"
          create_annotated_tag: true
          dry_run: false
          default_bump: "patch"

      - name: Build and Push Frontend
        env:
          VERSION: ${{ steps.semver_frontend.outputs.new_tag }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ -z "$VERSION" ]]; then
            echo "ERROR: Version not determined!"
            exit 1
          fi

          echo "Building version: $VERSION"

          docker build \
            --build-arg VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }} \
            -t $DOCKERHUB_USER/frontend:latest \
            -t $DOCKERHUB_USER/frontend:${VERSION#v} \
            ./code/frontend

          docker push $DOCKERHUB_USER/frontend:latest
          docker push $DOCKERHUB_USER/frontend:${VERSION#v}

          if ! gh release create $VERSION \
            --title "Frontend Image Release $VERSION" \
            --notes "Production release" \
            --target main; then
            echo "Failed to create release"
            exit 1
          fi

      - name: Set up Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: v0.64.1

      - name: Download Trivy HTML template
        run: curl -sSL -o html.tpl https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl

      - name: Run Trivy Scan on Frontend Image
        env:
          DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          mkdir -p security/reports/frontend
          IMAGE="$DOCKERHUB_USER/frontend:latest"

          echo "Scanning image: $IMAGE"
          trivy image \
            --format template \
            --template @html.tpl \
            -o security/reports/frontend/trivy-latest.html \
            $IMAGE

      - name: Commit Trivy Report to gh-pages Branch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          cp security/reports/frontend/trivy-latest.html /tmp/frontend-trivy-latest.html

          git stash push --include-untracked -m "stash before switching to gh-pages"

          git checkout gh-pages

          mkdir -p frontend

          cp /tmp/frontend-trivy-latest.html frontend/trivy-latest.html

          git add -f frontend/trivy-latest.html
          git commit -m "chore: update frontend Trivy report" || echo "No changes to commit"
          git push https://x-access-token:${GH_TOKEN}@github.com/${{ github.repository }} HEAD:gh-pages

          git checkout -

          git stash pop || echo "No stash to pop" 

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./code/frontend/dist/
          publish_branch: gh-pages
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com 
          keep_files: true   

      - name: Docker logout
        if: always()
        run: docker logout

  deploy-frontend:
    runs-on: [ubuntu-latest]
    needs: [build-and-push-frontend-main]
    steps:
      - name: deploy-frontend
        run : |   
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > key
            ssh -i key -o StrictHostKeyChecking=no ${{ secrets.USER_NAME }}@${{ secrets.SSH_HOST }} 
            cd /home/ec2-user/production
            docker compose pull frontend
            docker compose --profile frontend up -d
