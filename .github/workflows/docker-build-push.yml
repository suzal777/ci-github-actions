name: Docker Build & Push

on:
  push:
    branches: [main, dev]

  pull_request:
    branches: [dev]
    types: [opened, synchronize, reopened]  

env:
  DOCKERHUB_USER: suzal777

jobs:
  commit-lint:
    if: github.event_name == 'pull_request'
    name: Check Conventional Commits
    runs-on: ubuntu-latest
    steps:
      - uses: amannn/action-semantic-pull-request@v5
        with:
          types: |
            feat
            fix
            chore
            docs
            refactor
            style
            perf
            test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pr-checks:
    if: github.event_name == 'pull_request'
    name: PR Research Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install ESLint
        run: npm install -g eslint

      - name: Run ESLint on frontend
        run: |
          eslint ./code/frontend --ext .js,.jsx,.ts,.tsx || exit 1

      - name: Install TSLint
        run: npm install -g tslint typescript

      - name: Run TSLint on backend1
        run: |
          if [ -f ./code/backend1/tslint.json ]; then
            tslint -c ./code/backend1/tslint.json "./code/backend1/src/**/*.ts" || exit 1
          else
            echo "Skipping backend1: tslint.json not found"
          fi

      - name: Run TSLint on backend2
        run: |
          if [ -f ./code/backend2/tslint.json ]; then
            tslint -c ./code/backend2/tslint.json "./code/backend2/src/**/*.ts" || exit 1
          else
            echo "Skipping backend2: tslint.json not found"
          fi        

  build-and-push:
    if: github.event_name == 'push'
    
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker login
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and Push Frontend
        run: |
          docker build -t $DOCKERHUB_USER/frontend:latest ./code/frontend
          docker push $DOCKERHUB_USER/frontend:latest

      - name: Build and Push Backend1
        run: |
          docker build -t $DOCKERHUB_USER/backend1:latest ./code/backend1
          docker push $DOCKERHUB_USER/backend1:latest

      - name: Build and Push Backend2
        run: |
          docker build -t $DOCKERHUB_USER/backend2:latest ./code/backend2
          docker push $DOCKERHUB_USER/backend2:latest
